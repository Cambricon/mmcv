library "cambricon-pipe-lib@master"

// param: MMCV_BRANCH, DOCKER_IMAGE, CARD_TYPE, DRIVER_VERSION, NODE_LABEL

cnpipe {
    uploadTestResult 'master', false
    // 获取mmcv仓库代码
    task('clone_mmcv', 'CloneTask') {
        stage 'clone'
        branch  this.MMCV_BRANCH
        url "ssh://git@gitlab.software.cambricon.com:2289/neuware/oss/openmmlab/mmcv.git"
        depth 1
    }

    // 获取torch1.9 daily docker
    def docker_image_19 = package.properties("http://daily.software.cambricon.com/daily/pytorch/docker/catch_1.9_develop/ubuntu18.04/3.7/latest").get("docker")
    // 获取torch1.13 daily docker
    def docker_image_113 = package.properties("http://daily.software.cambricon.com/daily/pytorch/docker/catch_1.13.1_develop/ubuntu20.04/3.10/latest").get("docker")
    if (this.DOCKER_IMAGE) {
        docker_image = this.DOCKER_IMAGE
    }
    // 运行单元测试
    task('run_unit_test_catch_1.9', unit_test(docker_image_19))
    task('run_unit_test_catch_1.13', unit_test(docker_image_113))
}

def unit_test(docker_image) {
    return {
        stage 'test_mmcv_ops'
        timeout 120
        if (this.NODE_LABEL) {
            // 线下机
            runOnCloud false
            node {
                label this.NODE_LABEL
            }
            container {
                image docker_image
                runArgs '--shm-size 64G --network=host --privileged --device /dev/cambricon_dev0 --device /dev/cambricon_ctl -v /usr/bin/cnmon:/usr/bin/cnmon'
            }
        } else {
            // 云平台
            node {
                cardType this.CARD_TYPE.split(',')
                drvVer this.DRIVER_VERSION
            }
            container {
                image docker_image
            }
            resReq {
                reqMlus 1
                lmtMlus 1
                reqCpu 64
                lmtCpu 64
                reqMemory '60Gi'
                lmtMemory '70Gi'
                reqEphemeralStorage '96Gi'
                lmtEphemeralStorage '96Gi'
                modifyShm true
            }
        }
        unstash 'mmcv'
        script '''
            set -e
            set -x
            pushd mmcv
                source /torch/venv3/pytorch/bin/activate
                pip install -r requirements.txt
                catch_version=$(pip show torch-mlu 2>/dev/null)
                package_version=$(echo "$catch_version" | grep -oP '(?<=Version: ).*')
                if [[ "$package_version" == *torch1.9 ]];
                then
                    pip install transformers==4.6.0
                fi
                pip install opencv-python==4.8.1.78
                MMCV_WITH_OPS=1 python setup.py install
                pytest -s tests/test_ops tests/test_mlu_ops --disable-warnings --log-file=${CI_WORK_DIR}/test_log/test_ops_log.txt --junitxml=${CI_WORK_DIR}/test_result/test_mmcv_unit_test.xml
            popd
            mkdir dmesg_log
            RESULT=$?
            if [[${RESULT} != "0"]]; then
                # 存储dmesg信息
                echo "================= saved dmesg ================="
                dmesg -T > ${CI_WORK_DIR}/dmesg_log/dmesg.log
            fi
        '''
        stash 'dmesg_log','dmesg_log'
        archiveLog 'test_log'
        junitXml 'test_result'
    }
}
